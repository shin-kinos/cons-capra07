
use std::collections::HashMap;

use crate::weighting::SYMBOL;

pub fn define_bg_dist( arg_b : &String ) -> HashMap<char, f64>
{
	/*
	unsafe {
		println!( "SYMBOL : {:?}", SYMBOL );
	}
	*/

	let mut _dist_list : Vec<f64> = Vec::new();

	match ( *arg_b ).as_str() {
		/* The amino acid order :                A,        R,        N,        D,        C,        Q,        E,        G,        H,        I,        L,        K,        M,        F,        P,        S,        T,        W,        Y,        V */
		"blosum62"  => _dist_list = vec![    0.078,    0.051,    0.041,    0.052,    0.024,    0.034,    0.059,    0.083,    0.025,    0.062,    0.092,    0.056,    0.024,    0.044,    0.043,    0.059,    0.055,    0.014,    0.034,    0.072 ],
		"swissprot" => _dist_list = vec![    0.083,    0.056,    0.041,    0.055,    0.014,    0.039,    0.067,    0.071,    0.023,    0.059,    0.097,    0.058,    0.024,    0.039,    0.047,    0.066,    0.054,    0.011,    0.029,    0.069 ],
		"extra"     => _dist_list = vec![    0.086,    0.042,    0.046,    0.049,    0.029,    0.040,    0.051,    0.078,    0.021,    0.046,    0.088,    0.063,    0.025,    0.037,    0.049,    0.073,    0.060,    0.014,    0.036,    0.067 ],
		"membrane"  => _dist_list = vec![    0.081,    0.046,    0.037,    0.038,    0.020,    0.031,    0.046,    0.070,    0.020,    0.067,    0.110,    0.044,    0.028,    0.056,    0.047,    0.073,    0.056,    0.018,    0.033,    0.077 ],
		"intra"     => _dist_list = vec![    0.079,    0.049,    0.040,    0.055,    0.019,    0.044,    0.071,    0.071,    0.021,    0.052,    0.086,    0.067,    0.024,    0.039,    0.053,    0.066,    0.053,    0.012,    0.031,    0.068 ],
		"jtt"       => _dist_list = vec![ 0.076748, 0.051691, 0.042645, 0.051544, 0.019803, 0.040752, 0.061830, 0.073152, 0.022944, 0.053761, 0.091904, 0.058676, 0.023826, 0.040126, 0.050901, 0.068765, 0.058565, 0.014261, 0.032102, 0.066005 ],
		"wag"       => _dist_list = vec![ 0.086628, 0.043972, 0.039089, 0.057045, 0.019308, 0.036728, 0.058059, 0.083252, 0.024431, 0.048466, 0.086209, 0.062029, 0.019503, 0.038432, 0.045763, 0.069518, 0.061013, 0.014386, 0.035274, 0.070896 ],
		"lg"        => _dist_list = vec![ 0.079858, 0.053250, 0.041401, 0.051839, 0.015745, 0.035435, 0.059572, 0.071280, 0.022593, 0.063601, 0.103058, 0.054139, 0.023746, 0.046152, 0.042901, 0.061295, 0.053150, 0.014038, 0.036557, 0.070391 ],
		"equal"     => _dist_list = vec![ 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000 ],
		_           => _dist_list = vec![ 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000, 0.050000 ],
	}

	let mut bg_freq : HashMap<char, f64> = HashMap::new();
	/*
	unsafe {
		for aa in SYMBOL.iter() { bg_freq.insert( *aa, 0.05 ); }
	}
	*/

	unsafe {
		for i in 0 .. SYMBOL.len() {
			bg_freq.insert( SYMBOL[ i ], _dist_list[ i ] );
		}
	}
	//println!( "bg_freq : {:?}", bg_freq );

	bg_freq
}
